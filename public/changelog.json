{
  "title": "chlog",
  "description": "Changelog for the AI changelog generation CLI tool, chlog",
  "repository": "https://github.com/ammar-ahmed22/chlog",
  "entries": [
    {
      "version": "1.3.0",
      "date": "2025-05-15",
      "from_ref": "v1.2.0",
      "to_ref": "v1.3.0",
      "changes": [
        {
          "id": "add-init-command-for-interactive",
          "title": "Add 'init' command for interactive changelog and config file creation",
          "description": "Introduced a new command 'chlog init' that allows users to interactively create a changelog file with metadata fields such as title, description, and repository URL. It also optionally creates a configuration YAML file for the generate command, which stores settings like LLM provider, model, API key, and output preferences to simplify future changelog generation.",
          "impact": "Users can now conveniently initialize a changelog file with essential metadata without manual file setup. The optional config file streamlines repeated use of 'chlog generate' by predefining necessary flags, improving usability and reducing error potential during changelog generation.",
          "commits": [
            "d9f9d0ba5070c4f0641ba3cc2ceeafe759c7ced0"
          ],
          "tags": [
            "feature"
          ]
        }
      ]
    },
    {
      "version": "1.2.0",
      "date": "2025-05-15",
      "from_ref": "v1.1.1",
      "to_ref": "v1.2.0",
      "changes": [
        {
          "id": "support-updating-entries-key-in-existing",
          "title": "Support updating 'entries' key in existing changelog files",
          "description": "The changelog generator now supports updating an existing JSON file where changelog entries are stored under an 'entries' key. When a changelog file contains an object with an 'entries' array, new changelog entries will be prepended to this array, allowing additional metadata to be stored alongside entries in the same file.",
          "impact": "Users can maintain changelog files containing both metadata and changelog entries by placing entries in an 'entries' array. The 'chlog generate --file' command correctly updates this array instead of overwriting the entire file. This allows more flexible changelog structures without losing additional information.",
          "commits": [
            "c3a95aa0aaa427b8651f534048f2096ecb22ed8a"
          ],
          "tags": [
            "feature"
          ]
        },
        {
          "id": "automatically-create-changelog-file-if-it",
          "title": "Automatically create changelog file if it does not exist",
          "description": "If the changelog file specified by the user does not exist, it will now be automatically created as an empty JSON array before writing new entries. This removes the need for manual creation of the changelog file beforehand.",
          "impact": "Users can specify a changelog file that doesn't exist yet. The tool will handle creating it, improving usability and reducing errors related to missing files when generating changelogs.",
          "commits": [
            "55944a27c21654720455113b5fdf5f6556d2ede2"
          ],
          "tags": [
            "fix"
          ]
        },
        {
          "id": "cleanup-and-improve-readme-documentation",
          "title": "Cleanup and improve README documentation",
          "description": "The README.md file was cleaned up by removing an unnecessary example output section and improving formatting and wording of various sections including installation and usage instructions. The documentation now provides clearer guidance and a better reading experience for users.",
          "impact": "End users have an improved README that is more concise and clear, making it easier to understand installation steps and usage options without unnecessary repetition or outdated sections.",
          "commits": [
            "ff7f6e6f6905050d7e1cd18be2a5e0ec810e089e"
          ],
          "tags": [
            "documentation"
          ]
        }
      ]
    },
    {
      "version": "1.1.1",
      "date": "2025-05-15",
      "from_ref": "v1.1.0",
      "to_ref": "v1.1.1",
      "changes": [
        {
          "id": "add-spinner-for-ai-generation",
          "title": "Add Spinner for AI Generation",
          "description": "A spinner has been added to visually indicate progress during the AI generation of changelog entries, enhancing user experience by providing feedback that the process is ongoing.",
          "impact": "Users will now see a spinner while changelog entries are being generated by AI, reducing uncertainty and improving usability during longer processing times.",
          "commits": [
            "eeb458d2913ee5219a16d3503e01639add8fc422"
          ],
          "tags": [
            "feature"
          ]
        },
        {
          "id": "colorize-and-prettify-verbose-output",
          "title": "Colorize and Prettify Verbose Output",
          "description": "Verbose output during changelog generation has been enhanced with color coding and formatting, improving readability and helping users better follow the generation workflow and details.",
          "impact": "Users will experience clearer and more visually appealing verbose output, making debugging and monitoring the changelog generation process more effective and pleasant.",
          "commits": [
            "eeb458d2913ee5219a16d3503e01639add8fc422"
          ],
          "tags": [
            "improvement"
          ]
        },
        {
          "id": "fix-git-log-range-output",
          "title": "Fix Git Log Range Output",
          "description": "The function that retrieves git log commits between two references now returns a list of individual commit strings instead of a single concatenated string, improving clarity and ease of use.",
          "impact": "Users or tools consuming the git log range output will now receive a structured list of commits for better processing and integration, rather than a single combined string that is harder to parse.",
          "commits": [
            "16de327007c90243647e66e3a9c77ee6a36a0466"
          ],
          "tags": [
            "fix"
          ]
        }
      ]
    },
    {
      "version": "1.1.0",
      "date": "2025-05-14",
      "from_ref": "v1.0.0",
      "to_ref": "v1.1.0",
      "changes": [
        {
          "id": "add-a-unique-id-to-each-change",
          "title": "Add a unique id to each change",
          "description": "Each changelog entry now includes a unique identifier field 'id' which is generated as a truncated kebab-case version of the change's title. This facilitates easier referencing and management of individual changes.",
          "impact": "Users and integrations can now reference changelog entries by a unique, readable id, improving traceability and management of changes.",
          "commits": [
            "cd6b6457ce5bd31324bda9fc66628ded9ae27f52"
          ],
          "tags": [
            "feature"
          ]
        },
        {
          "id": "remove-old-build-script",
          "title": "Remove old build script",
          "description": "The old 'build' target has been removed from the Makefile. The 'install' target no longer depends on 'build' and simply installs the binary. This simplifies the build and installation process by removing the redundant build steps.",
          "impact": "Users who previously relied on the 'build' target or 'install' running 'build' will need to adjust their workflow accordingly, as the build steps are no longer executed automatically during installation.",
          "commits": [
            "3b2835fd8795727046fcf9385c458adeaf0a3b88"
          ],
          "tags": [
            "chore",
            "improvement"
          ]
        }
      ]
    },
    {
      "version": "1.0.0",
      "date": "2025-05-14",
      "from_ref": "v0.4.0",
      "to_ref": "v1.0.0",
      "changes": [
        {
          "id": "added-version-date-and-git-range",
          "title": "Added version, date, and git range parameters for changelog entries",
          "description": "Introduced manual input fields for version, date, and the git commit range within changelog entries to enhance flexibility and clarity of changelog data.",
          "impact": "This change allows users to manually specify the version, date, and commit range when generating changelog entries, improving the accuracy and user control over release information.",
          "commits": [
            "804391e4e40b0182605b801b7a9d68120c893410"
          ],
          "tags": [
            "feature"
          ]
        },
        {
          "id": "reworked-changelog-format-to-improve-end",
          "title": "Reworked changelog format to improve end-user experience",
          "description": "Completed a comprehensive redesign of the changelog format to make it more user-friendly, including more detailed fields for title, description, impact, associated commits, and tags for each change.",
          "impact": "This rework improves the readability and usefulness of the changelog for end users by providing more structured and detailed information about each change, enhancing overall communication and documentation quality.",
          "commits": [
            "12abd5cdd98b439164bde9ca760d94a96496bfaf"
          ],
          "tags": [
            "feature"
          ]
        }
      ]
    },
    {
      "version": "0.4.0",
      "date": "2025-05-12",
      "from_ref": "v0.3.0",
      "to_ref": "v0.4.0",
      "changes": [
        {
          "id": "add-optional-config-file-support-for",
          "title": "Add optional config file support for generate command",
          "description": "The generate command now supports loading settings from an optional config file. Users can specify a configuration file path, and settings such as from, to, verbose, provider, model, apiKey, date, pretty, and file can be set via configuration as well as command line flags. This allows easier and more flexible configuration management for generating changelogs.",
          "impact": "Users can now provide configuration through a file, making it simpler to reuse and manage generate command options without needing to specify all flags every time. This may change the precedence of how flags and config values are applied and require users to create config files as needed.",
          "commits": [
            "c08bd2429546546d992c5364338051d0a5d4edf6"
          ],
          "tags": [
            "feature"
          ]
        }
      ]
    },
    {
      "version": "0.3.0",
      "date": "2025-05-09",
      "from_ref": "v0.2.0",
      "to_ref": "v0.3.0",
      "changes": [
        {
          "id": "add-validation-for-existing-changelog",
          "title": "Add validation for existing changelog file input",
          "description": "A new flag was added to allow users to pass an existing changelog JSON file. The file is parsed and validated to ensure it exists, is readable, and contains valid JSON representing an array of changelog entries. This helps maintain correctness and prevents errors when updating changelogs.",
          "impact": "Users can now supply an existing changelog file via a command-line flag, which will be validated before generating new changelog entries, ensuring smoother and safer changelog updates.",
          "commits": [
            "4e87e99f01e86d7eecd7b7fa6d65044a89334e23"
          ],
          "tags": [
            "feature"
          ]
        },
        {
          "id": "write-new-changelog-entry-to-existing",
          "title": "Write new changelog entry to existing changelog file",
          "description": "If an existing changelog file is provided, the tool now writes the newly generated changelog entry to the beginning of the existing changelog array and saves the updated changelog back to the specified file. This allows incremental changelog updates.",
          "impact": "Users can maintain and update existing changelog JSON files automatically by appending new entries, improving workflow efficiency for managing changelog history.",
          "commits": [
            "b1ab77eb1c78df2455dc03c286a7d1c85268c98d"
          ],
          "tags": [
            "feature"
          ]
        },
        {
          "id": "include-provider-and-model-information-in",
          "title": "Include provider and model information in verbose output",
          "description": "When verbose mode is enabled during changelog generation, the output now includes the AI provider and model names being used. This enhances transparency about the underlying AI system performing the generation.",
          "impact": "Users running the tool in verbose mode gain insight into which AI provider and model are used, helping with troubleshooting or verifying configurations.",
          "commits": [
            "5debe9f8e69fc48a59af54f31d8f4de4c0d97893"
          ],
          "tags": [
            "improvement"
          ]
        }
      ]
    },
    {
      "version": "0.2.0",
      "date": "2025-05-09",
      "from_ref": "v0.1.0",
      "to_ref": "v0.2.0",
      "changes": [
        {
          "id": "implement-gemini-ai-client-changelog",
          "title": "Implement Gemini AI client changelog generation",
          "description": "Added support for generating changelog entries using the Gemini AI API. The implementation requests structured JSON output following a specific schema for releases, including version, date, and a list of changes with details, commit hashes, and tags.",
          "impact": "Users can now generate changelog entries with improved structure and reliability using Gemini AI, enhancing automation and accuracy of changelog generation.",
          "commits": [
            "febff5a7a85817672c4e576d62772ceb4871586b"
          ],
          "tags": [
            "feature"
          ]
        },
        {
          "id": "privatize-and-rename-generate-command",
          "title": "Privatize and rename generate command flags; add stderr helper functions",
          "description": "Refined the command-line flag handling by privatizing and renaming generate command flags for better encapsulation. Added utility functions for printing to stderr for consistent logging.",
          "impact": "Improves code maintainability by clarifying internal data structures and enhances user feedback during CLI operations via standardized error output.",
          "commits": [
            "fb7665d614270fbb4c39be573f0effe52de404f1"
          ],
          "tags": [
            "improvement"
          ]
        }
      ]
    },
    {
      "version": "0.1.0",
      "date": "2025-05-09",
      "from_ref": "16cb813bbea9efb4ee24ab170babbe54091d6a78",
      "to_ref": "v0.1.0",
      "changes": [
        {
          "id": "add-generate-command",
          "title": "Add generate command",
          "description": "Introduced a new 'generate' command to the CLI tool to initiate changelog generation.",
          "impact": "Users can now use the 'generate' command as a starting point to generate AI-powered changelogs.",
          "commits": [
            "2caa8df4afe444ab7926f2a31e4369feab555776"
          ],
          "tags": [
            "feature"
          ]
        },
        {
          "id": "add-from-and-to-flags-with-validation-to",
          "title": "Add from and to flags with validation to generate command",
          "description": "Enhanced the 'generate' command by adding '--from' and '--to' flags to specify the range of commits for changelog generation, along with validation to ensure these references exist in Git.",
          "impact": "Users can specify commit ranges for the changelog and receive validation errors for invalid references, improving command usability and correctness.",
          "commits": [
            "c77998ea601b3c1c72d2b746b7ed0c8358ef723e"
          ],
          "tags": [
            "feature",
            "improvement"
          ]
        },
        {
          "id": "improve-git-log-retrieval-and-parsing-in",
          "title": "Improve git log retrieval and parsing in generate command",
          "description": "Updated the 'generate' command to retrieve git logs and commit histories, clean up flag parsing, and support verbose output. Added functions to fetch commit details and history with diffs.",
          "impact": "The tool now better handles commit retrieval and displays verbose output if requested, enhancing traceability and user feedback during changelog generation.",
          "commits": [
            "faa6e7fa04a2932bf89823c10f25ca0c7c42b291"
          ],
          "tags": [
            "feature",
            "improvement"
          ]
        },
        {
          "id": "refactor-flag-parsing-to-include",
          "title": "Refactor flag parsing to include validation",
          "description": "Moved Git reference validation logic to flag parsing and validation function for cleaner and centralized argument verification.",
          "impact": "Improved code maintainability and clearer flag validation error handling for users.",
          "commits": [
            "12c13083227bde82f4e453879cd180d36610f390"
          ],
          "tags": [
            "improvement"
          ]
        },
        {
          "id": "extract-git-interaction-logic-into",
          "title": "Extract Git interaction logic into separate package",
          "description": "Refactored Git-related functions to a dedicated 'git' package to separate concerns and improve project structure.",
          "impact": "Improved code modularity and reusability, enabling easier maintenance and potential extension of Git-related features.",
          "commits": [
            "dbe2f28b1a9fecd820e39af33aa133e0b3ed7d30"
          ],
          "tags": [
            "improvement"
          ]
        },
        {
          "id": "add-readme-with-basic-project-description",
          "title": "Add README with basic project description",
          "description": "Added a README.md file with an introductory title and brief description of the 'chlog' CLI tool.",
          "impact": "Provides users and contributors with an initial overview of the project and its purpose.",
          "commits": [
            "8f84547c6f226f1cf71e7e898a1fb3e53279bac4"
          ],
          "tags": [
            "documentation"
          ]
        },
        {
          "id": "add-ai-client-interface-and-provider",
          "title": "Add AI client interface and provider/model configuration",
          "description": "Added a new interface for AI clients and defined supported AI providers and models (OpenAI and Gemini) with environment variable configurations for API keys.",
          "impact": "Enables integration with AI providers for changelog generation, allowing users to select providers and models with proper configuration and validation.",
          "commits": [
            "d19f6e6fabf320b413b755500d774f3221d21a3e"
          ],
          "tags": [
            "feature"
          ]
        },
        {
          "id": "implement-ai-client-creation-factory",
          "title": "Implement AI client creation factory method",
          "description": "Introduced a factory function to create AI clients based on provider name and API key, supporting OpenAI and Gemini providers with error handling for unsupported providers or missing keys.",
          "impact": "Simplifies AI client instantiation in the codebase and validates provider support, enhancing extensibility and user feedback.",
          "commits": [
            "069a78eef64c36e2a3219a24856e1bae58c4a9d8"
          ],
          "tags": [
            "feature",
            "improvement"
          ]
        },
        {
          "id": "add-version-and-date-flags-to-generate",
          "title": "Add version and date flags to generate command with verbose output fix",
          "description": "Extended the 'generate' command to accept a version argument and a date flag for the changelog entry, and modified verbose output to pipe messages to stderr.",
          "impact": "Users can now specify the changelog version and date more flexibly, and verbose logs do not interfere with stdout changelog content, improving usability and scripting integration.",
          "commits": [
            "7ac8ef033e0640dceae8c76902eb07a35f3cfa42"
          ],
          "tags": [
            "feature",
            "fix",
            "improvement"
          ]
        },
        {
          "id": "generate-json-changelog-with-open-ai",
          "title": "Generate JSON changelog with OpenAI integration",
          "description": "Implemented the AI-powered changelog generation using OpenAI client, including handling of input commit history with diffs, prompt construction, and parsing JSON structured response according to the changelog schema.",
          "impact": "The tool can now generate AI-assisted changelog JSON output from Git commit ranges using OpenAI models, improving automation and structured changelog creation.",
          "commits": [
            "24fced799c5c2a6b22f90b28606c33c9b5e92bfa"
          ],
          "tags": [
            "feature"
          ]
        }
      ]
    }
  ]
}
