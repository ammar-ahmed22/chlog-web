[
  {
    "version": "0.2.0",
    "date": "2025-05-14",
    "from_ref": "v0.1.1",
    "to_ref": "v0.2.0",
    "changes": [
      {
        "id": "support-optional-config-file-for-generate",
        "title": "Support optional config file for generate command flags",
        "description": "The changelog generation command now supports the use of an optional YAML config file to set flag values for the generate process. This allows users to define default behaviors and reduces the need for repetitive command-line flag specifications.",
        "impact": "Users can now specify configuration parameters for changelog generation in a YAML file which will be automatically loaded if present, simplifying configuration management and making releases easier to handle.",
        "commits": [
          "c08bd2429546546d992c5364338051d0a5d4edf6"
        ],
        "tags": [
          "feature"
        ]
      },
      {
        "id": "add-version-date-and-git-range-to",
        "title": "Add version, date, and git range to changelog entries manually",
        "description": "Changelog entries were modified to include additional fields such as version, date, starting commit reference ('from_ref'), and ending commit reference ('to_ref') directly in the manual input. This provides a clearer and more complete representation of the changes in each release.",
        "impact": "Changelog outputs will now explicitly include version, date, and git references for each entry, improving tracking and presentation of release information to end-users.",
        "commits": [
          "804391e4e40b0182605b801b7a9d68120c893410"
        ],
        "tags": [
          "feature",
          "changed"
        ]
      }
    ]
  },
  {
    "version": "0.1.1",
    "date": "2025-05-12",
    "from_ref": "v0.1.0",
    "to_ref": "v0.1.1",
    "changes": [
      {
        "id": "implemented-changelog-generation-using",
        "title": "Implemented changelog generation using Gemini AI client",
        "description": "Added functionality to generate changelog entries using the Gemini API, which includes specifying a JSON response schema matching the changelog entries and handling JSON unmarshalling of the AI response.",
        "impact": "Users can now generate changelog entries powered by Gemini AI with structured and validated JSON output, improving reliability and integration with Gemini AI.",
        "commits": [
          "febff5a7a85817672c4e576d62772ceb4871586b"
        ],
        "tags": [
          "feature"
        ]
      },
      {
        "id": "added-verbose-output-for-ai-provider-and",
        "title": "Added verbose output for AI provider and model information",
        "description": "Enhanced verbose logging when generating changelog entries to include the AI provider and model used in the generation process.",
        "impact": "Enables users to see which AI provider and model are being utilized during changelog generation, improving transparency and debugging capability.",
        "commits": [
          "5debe9f8e69fc48a59af54f31d8f4de4c0d97893"
        ],
        "tags": [
          "improvement"
        ]
      },
      {
        "id": "introduced-flag-to-specify-existing",
        "title": "Introduced flag to specify existing changelog file with validation",
        "description": "Added support for a command-line flag to specify a JSON file containing existing changelog entries, with validation to ensure the file exists and is properly formatted JSON.",
        "impact": "Users can now update an existing changelog JSON file with new entries, integrating generated changelogs with previous changelogs seamlessly.",
        "commits": [
          "4e87e99f01e86d7eecd7b7fa6d65044a89334e23"
        ],
        "tags": [
          "feature"
        ]
      },
      {
        "id": "enabled-writing-new-changelog-entry-to",
        "title": "Enabled writing new changelog entry to existing changelog file",
        "description": "Extended generate command to append newly generated changelog entries at the start of an existing changelog JSON file if provided, including verbose logging and error handling.",
        "impact": "Supports maintaining and updating existing changelog files automatically without manual merges, streamlining release documentation workflows.",
        "commits": [
          "b1ab77eb1c78df2455dc03c286a7d1c85268c98d"
        ],
        "tags": [
          "feature"
        ]
      },
      {
        "id": "privatized-and-renamed-generate-command",
        "title": "Privatized and renamed generate command flags; added helper functions for stderr printing",
        "description": "Refactored generate command flags to use unexported struct for encapsulation and renamed for clarity. Added utility functions to assist with consistent stderr printing in the CLI tool.",
        "impact": "Improves internal code quality and consistency of verbose error and status logging output for better user experience and maintainability.",
        "commits": [
          "fb7665d614270fbb4c39be573f0effe52de404f1"
        ],
        "tags": [
          "improvement",
          "chore"
        ]
      }
    ]
  },
  {
    "version": "0.1.0",
    "date": "2025-05-08",
    "from_ref": "16cb813",
    "to_ref": "v0.1.0",
    "changes": [
      {
        "id": "add-generate-command-for-changelog",
        "title": "Add generate command for changelog generation",
        "description": "Introduced the 'generate' command which serves as the CLI entry point to generate AI-powered changelogs from git history.",
        "impact": "Users can invoke 'generate' command in the CLI to create changelogs, enabling automated changelog generation workflows.",
        "commits": [
          "2caa8df4afe444ab7926f2a31e4369feab555776"
        ],
        "tags": [
          "feature"
        ]
      },
      {
        "id": "add-from-and-to-flags-with-validation-to",
        "title": "Add from and to flags with validation to generate command",
        "description": "Enhanced the 'generate' command to accept '--from' and '--to' flags representing git commit references, adding validation to ensure these references exist in git history.",
        "impact": "Allows users to specify custom commit ranges for changelog generation, improving flexibility and correctness by validating inputs early.",
        "commits": [
          "c77998ea601b3c1c72d2b746b7ed0c8358ef723e"
        ],
        "tags": [
          "feature",
          "improvement"
        ]
      },
      {
        "id": "fetch-git-logs-commits-and-commit-details",
        "title": "Fetch git logs, commits and commit details with improved flag parsing",
        "description": "Implemented functions to fetch git logs and commit details within a specified range, and introduced verbose flag support for detailed output. Also refactored flag parsing and validation for clarity.",
        "impact": "This enables the generate command to process and retrieve detailed git commit information which is essential for accurate changelog generation. Verbose mode aids debugging and user feedback during changelog creation.",
        "commits": [
          "faa6e7fa04a2932bf89823c10f25ca0c7c42b291"
        ],
        "tags": [
          "feature",
          "improvement"
        ]
      },
      {
        "id": "refactor-flag-parsing-and-validation-to",
        "title": "Refactor flag parsing and validation to consolidate logic",
        "description": "Moved git ref validation into a unified flag parsing and validation function, simplifying the generate command's RunE function and improving error handling fidelity.",
        "impact": "Improves maintainability and reliability of flag validation, ensuring invalid git references are caught promptly in a single place.",
        "commits": [
          "12c13083227bde82f4e453879cd180d36610f390"
        ],
        "tags": [
          "improvement"
        ]
      },
      {
        "id": "move-git-related-functions-to-a-separate",
        "title": "Move git-related functions to a separate package",
        "description": "Refactored the code to relocate all git command functions into a dedicated 'git' package, enhancing modularity and separation of concerns.",
        "impact": "Improves code organization and reuse, allowing the git logic to be independently maintained and imported where needed.",
        "commits": [
          "dbe2f28b1a9fecd820e39af33aa133e0b3ed7d30"
        ],
        "tags": [
          "improvement"
        ]
      },
      {
        "id": "add-readme-with-project-description",
        "title": "Add README with project description",
        "description": "Created a README.md file with basic centered title and description for the chlog CLI tool, explaining its purpose as an AI-powered changelog generator.",
        "impact": "Provides initial documentation and project visibility to users and contributors through a standardized project introduction.",
        "commits": [
          "8f84547c6f226f1cf71e7e898a1fb3e53279bac4"
        ],
        "tags": [
          "documentation"
        ]
      },
      {
        "id": "implement-ai-client-interface-and",
        "title": "Implement AI client interface and provider/model configurations",
        "description": "Added interfaces and structs for AI providers (OpenAI and Gemini) along with configuration and CLI help for supported AI providers and models.",
        "impact": "Users can select which AI LLM provider and model to use for changelog generation, improving extensibility and customization of the AI backend.",
        "commits": [
          "d19f6e6fabf320b413b755500d774f3221d21a3e"
        ],
        "tags": [
          "feature"
        ]
      },
      {
        "id": "add-new-ai-client-factory-function-for-ai",
        "title": "Add NewAIClient factory function for AI clients",
        "description": "Added a factory function that returns the respective AIClient implementations (OpenAIClient or GeminiAIClient) based on the provider and API key provided.",
        "impact": "Simplifies client creation and enforces API key requirement, enhancing the modularity and interface adherence of AI provider implementations.",
        "commits": [
          "069a78eef64c36e2a3219a24856e1bae58c4a9d8"
        ],
        "tags": [
          "feature"
        ]
      },
      {
        "id": "enhance-generate-command-to-accept",
        "title": "Enhance generate command to accept provider, model, API key flags and invoke AI client",
        "description": "Extended the generate command to accept provider, model, and API key flags, construct an AI client accordingly, fetch commit history and diffs, then invoke AI-powered changelog generation with verbose and pretty print options.",
        "impact": "Users can now generate changelogs powered by AI models of their choice, with fine control over input and output formatting, greatly enhancing functionality of the CLI tool.",
        "commits": [
          "d19f6e6fabf320b413b755500d774f3221d21a3e",
          "9404cbb4e5a147b1614452358894be170d089056"
        ],
        "tags": [
          "feature",
          "improvement"
        ]
      },
      {
        "id": "add-models-command-to-list-supported",
        "title": "Add models command to list supported providers and models",
        "description": "Introduced a new CLI command 'models' to list available AI providers and their supported models including environment variable hints for API keys.",
        "impact": "Improves usability by helping users discover configurable AI backends and model options, aiding in proper configuration and setup.",
        "commits": [
          "2f6299eb0aeca18bfd8f0c1ff69cfcc047d388e8"
        ],
        "tags": [
          "feature",
          "documentation"
        ]
      },
      {
        "id": "add-version-argument-and-date-flag-to",
        "title": "Add version argument and date flag to generate command with output improvements",
        "description": "Updated the generate command to accept a positional version argument (defaulting to current date) and a date flag for changelog entries. Verbose output now pipes to stderr to separate it from changelog JSON output.",
        "impact": "Enables users to tag generated changelog entries with meaningful version numbers and dates, and improves command line output separation for scripting and logging purposes.",
        "commits": [
          "7ac8ef033e0640dceae8c76902eb07a35f3cfa42"
        ],
        "tags": [
          "feature",
          "fix"
        ]
      },
      {
        "id": "generate-json-changelog-output-using-open",
        "title": "Generate JSON changelog output using OpenAI client integration",
        "description": "Finalized the AI generation integration by formatting commit history and diffs, invoking the OpenAI API with structured prompts and JSON schema enforcement, then outputting the structured changelog entry as JSON.",
        "impact": "Provides end-to-end AI-powered structured changelog generation output, producing machine-readable JSON changelogs suitable for automation and tooling integration.",
        "commits": [
          "24fced799c5c2a6b22f90b28606c33c9b5e92bfa"
        ],
        "tags": [
          "feature",
          "improvement"
        ]
      }
    ]
  }
]
